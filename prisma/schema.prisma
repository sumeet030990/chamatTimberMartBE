// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model languages {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(20)
  code  String  @unique @db.VarChar(5)
  users users[]
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String  @unique
  users users[]
}

enum account_type {
  current
  saving
  salary
}

model user_bank_details {
  user_id        Int
  user           users         @relation(fields: [user_id], references: [id])
  account_name   String
  account_number String        @db.VarChar(20)
  bank_name      String        @db.VarChar(50)
  ifsc_code      String        @db.VarChar(20)
  account_type   account_type?
  is_primary     Boolean

  @@unique([user_id, account_number])
}

model company {
  id                 Int             @id @default(autoincrement())
  name               String          @db.VarChar(50)
  allow_billing      Boolean         @default(true)
  allow_gst_billing  Boolean         @default(false)
  primary_contact    String          @db.VarChar(15)
  secondary_contact  String?         @db.VarChar(15)
  logo_url           String?
  gst_no             String?
  gst_tax_percentage Int?
  address            String?
  country_id         String?         @db.VarChar(5)
  country_name       String?
  state_id           String?         @db.VarChar(5)
  state_name         String?
  city_name          String?
  pin_code           String?         @db.VarChar(20)
  users_company      users_company[]
  user_balance       user_balance[]
  transaction        transaction[]
}

enum gst_type {
  unregistered
  registered_business_regular
  registered_business_composition
}

model users {
  id                         Int       @id @default(autoincrement())
  name                       String    @db.VarChar(50)
  allow_login                Boolean   @default(true)
  user_name                  String?   @db.VarChar(50)
  password                   String?
  email_id                   String?   @db.VarChar(100)
  user_role                  roles     @relation(fields: [role_id], references: [id])
  role_id                    Int
  preffered_language         languages @relation(fields: [language_id], references: [id])
  language_id                Int
  primary_contact            String?   @db.VarChar(15)
  secondary_contact          String?   @db.VarChar(15)
  date_of_birth              DateTime?
  anniversary_date           DateTime?
  gst_no                     String?   @db.VarChar(30)
  gst_type                   gst_type?
  address                    String?
  country_id                 String?   @db.VarChar(5)
  country_name               String?
  state_id                   String?   @db.VarChar(5)
  state_name                 String?   @db.VarChar(50)
  city_name                  String?   @db.VarChar(50)
  pin_code                   String?   @db.VarChar(20)
  //created_timestamp
  created_at                 DateTime  @default(now())
  created_by_user            users     @relation("create_user_self_relation", fields: [created_by], references: [id]) // Step 2. Use the realtionship name
  created_by                 Int
  create_user_self_relation  users[]   @relation("create_user_self_relation") // Step 1. Define name of relationship for created_by field
  //updated_timestamp
  updated_at                 DateTime?
  updated_by_user            users?    @relation("update_user_self_relation", fields: [updated_by], references: [id])
  updated_by                 Int?
  update_user_self_relation  users[]   @relation("update_user_self_relation")
  //deleted_timestamp
  deleted_at                 DateTime?
  deleted_by_user            users?    @relation("deleted_user_self_relation", fields: [deleted_by], references: [id])
  deleted_by                 Int?
  deleted_user_self_relation users[]   @relation("deleted_user_self_relation")

  user_bank_details      user_bank_details[]
  todo_task_user         todo[]              @relation("todo_task_user")
  todo_created_by_user   todo[]              @relation("todo_created_by_user")
  users_company          users_company[]
  user_balance           user_balance[]
  transaction_for_user   transaction[]       @relation("transaction_for_user")
  transaction_created_by transaction[]       @relation("transaction_created_by")
  transaction_deleted_by transaction[]       @relation("transaction_deleted_by")
  bill_for_user          bills[]             @relation("bill_for_user")
  bill_created_by        bills[]             @relation("bill_created_by")
  bill_deleted_by        bills[]             @relation("bill_deleted_by")
  account_statement      account_statement[]
  statement_created_by   account_statement[] @relation("statement_created_by")

  @@unique([name])
}

model users_company {
  user_id    Int
  users      users   @relation(fields: [user_id], references: [id])
  company_id Int
  company    company @relation(fields: [company_id], references: [id])

  @@id([user_id, company_id])
}

model user_balance {
  id         Int     @id @default(autoincrement())
  user_id    Int
  users      users   @relation(fields: [user_id], references: [id])
  company_id Int
  company    company @relation(fields: [company_id], references: [id])
  amount     Int     @default(0)

  @@unique([user_id, company_id])
}

enum transaction_type {
  cr
  dr
}

model transaction {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  users             users               @relation("transaction_for_user", fields: [user_id], references: [id])
  company_id        Int
  company           company             @relation(fields: [company_id], references: [id])
  amount            Int                 @default(0)
  type              transaction_type
  date              DateTime
  payment_mode      String
  payment_details   String?
  note              String?
  created_at        DateTime            @default(now())
  created_by        Int
  createdByUser     users               @relation("transaction_created_by", fields: [created_by], references: [id])
  deleted_at        DateTime?
  deleted_by        Int?
  deletedByUser     users?              @relation("transaction_deleted_by", fields: [deleted_by], references: [id])
  account_statement account_statement[]
}

model todo {
  id               Int    @id @default(autoincrement())
  name             String
  task_for_user_id Int
  taskUser         users? @relation("todo_task_user", fields: [task_for_user_id], references: [id])

  created_at      DateTime @default(now())
  created_by_user Int
  createdByUser   users    @relation("todo_created_by_user", fields: [created_by_user], references: [id])
}

model Item {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(20)
  item_code    String         @default("hsin") @db.VarChar(20)
  item_type    String         @db.VarChar(20)
  length       Float?
  width        Float?
  height       Float?
  status       Boolean        @default(true)
  deleted_at   DateTime?
  bill_details bill_details[]
}

enum bill_type {
  whole_sale_bill
  retail
}

model bills {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  users             users               @relation("bill_for_user", fields: [user_id], references: [id])
  user_object       Json
  city              String
  contact_number    String
  item_type         String
  item_object       Json
  invoice_date      DateTime
  total             Int
  total_typewise    Json
  bill_type         bill_type
  bill_remark       String?
  created_at        DateTime            @default(now())
  created_by_user   Int
  createdByUser     users               @relation("bill_created_by", fields: [created_by_user], references: [id])
  deleted_at        DateTime?
  deleted_by_user   Int?
  deletedByUser     users?              @relation("bill_deleted_by", fields: [deleted_by_user], references: [id])
  bill_details      bill_details[]
  account_statement account_statement[]
}

model bill_details {
  bill_id     Int
  bills       bills   @relation(fields: [bill_id], references: [id])
  item_id     Int
  items       Item    @relation(fields: [item_id], references: [id])
  item_object Json?
  size        Int?
  piece       Int
  rate        Int
  remark      String?
  sub_items   Json?

  @@unique([bill_id, item_id])
}

model account_statement {
  id               String           @id @default(uuid())
  created_for      Int
  created_for_user users            @relation(fields: [created_for], references: [id])
  company_id       Int
  bills            bills?           @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  transaction      transaction?     @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  bill_id          Int?
  transaction_id   Int?
  statement        String
  amount           Int
  transaction_type transaction_type
  created_at       DateTime         @default(now())
  created_by_user  Int
  createdByUser    users            @relation("statement_created_by", fields: [created_by_user], references: [id])
}
